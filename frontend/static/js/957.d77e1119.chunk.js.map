{"version":3,"file":"static/js/957.d77e1119.chunk.js","mappings":"4RAcA,MA8HA,GA9HaA,EAAAA,EAAAA,OAAK,WAEhB,MAAMC,GAAWC,EAAAA,EAAAA,OACVC,EAAGC,IAAQC,EAAAA,EAAAA,IAAe,SAC3B,YAAEC,IAAgBC,EAAAA,EAAAA,KAElBC,GAAYC,EAAAA,EAAAA,IAAQ,CACxBC,cAAe,CACbC,MAAO,GACPC,SAAU,IAEZC,UAAUC,EAAAA,EAAAA,GAAYR,GACtBS,KAAM,SAGF,aAAEC,EAAY,UAAEC,GAAcT,GAC9B,OAAEU,EAAM,QAAEC,GAAYF,GACtB,YAAEG,IAAgBC,EAAAA,EAAAA,MAClB,UAAEC,IAAcC,EAAAA,EAAAA,KA+BhBC,EAAQC,aAAaC,QAAQ,UAEnC,OACEC,EAAAA,EAAAA,KAAA,WAASC,UAAU,YAAWC,UAG5BF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,YAAWC,UACxBC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,yBAAwBC,SAAA,EACrCF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,gBAAgB,WAAS,aAAYC,UAClDF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,iBAAgBC,UAC7BF,EAAAA,EAAAA,KAACI,EAAAA,GAAM,CAACH,UAAU,gBAAgBI,MAAM,EAAMC,SAAU,CACpDC,MAAO,IACPC,sBAAsB,GACrBC,QAAS,CAACC,EAAAA,IAAUR,UACvBF,EAAAA,EAAAA,KAACW,EAAAA,GAAW,CAACV,UAAU,mDAAkDC,UAGvEF,EAAAA,EAAAA,KAAA,OAAKY,IAAKf,EAAOgB,MAAO,CAACC,MAAO,QAASC,IAAI,cAwBrDf,EAAAA,EAAAA,KAAA,OAAKC,UAAU,0BAA0B,WAAS,aAAYC,UAC5DC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,uCAAsCC,SAAA,EACnDC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,qCAAoCC,SAAA,EACjDF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,qBAAoBC,SAAC,aACnCF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,OAAMC,SAAC,iDAEtBF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,YAAWC,UACxBF,EAAAA,EAAAA,KAAA,QAAMgB,YAAU,EAACC,SAAU5B,GA7E3B6B,UACZ,IACE,MAAMC,QAAe1B,EAAY,YAAa2B,GAC1CD,EAAOA,QAQTxB,EAAU,CACR0B,MAAOF,EAAOG,iBACdC,KAAK,wCACLC,KAAM,UACNC,kBAAmB,MAClB,MACDnD,EAASoD,EAAAA,EAAUC,OAbrBhC,EAAU,CACR0B,MAAOF,EAAOG,iBACdC,KAAK,wCACLC,KAAM,UACNC,kBAAmB,MAClB,KAUP,CAAE,MAAOG,GACPjC,EAAU,CACR0B,OAAOrB,EAAAA,EAAAA,KAAA,MAAAE,SAAI,oBACXqB,KAAK,0DACLC,KAAM,QACNC,kBAAmB,MAClB,KACL,KAmD2DvB,UAC7CC,EAAAA,EAAAA,MAAC0B,EAAAA,GAAY,IAAKhD,EAASqB,SAAA,EAEzBF,EAAAA,EAAAA,KAAC8B,EAAAA,EAAc,CAACC,KAAK,OAAOC,QAAQ,QAAQC,MAAOzD,EAAE,aAAc0D,YAAY,6BAC/ElC,EAAAA,EAAAA,KAAC8B,EAAAA,EAAc,CAACC,KAAK,WAAWC,QAAQ,WAAWC,MAAOzD,EAAE,gBAAiB0D,YAAY,MAEzF/B,EAAAA,EAAAA,MAAA,OAAKF,UAAU,cAAaC,SAAA,EAC1BF,EAAAA,EAAAA,KAAA,UAAQ+B,KAAK,SAAS9B,UAAU,qDAAoDC,SAAE,eACtFF,EAAAA,EAAAA,KAACmC,EAAAA,GAAI,CAACC,GAAIV,EAAAA,EAAUW,SAAUN,KAAK,SAAS9B,UAAU,wDAAuDC,SAAE,yBAKvHF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,4CAA2CC,UACxDC,EAAAA,EAAAA,MAAA,KAAGF,UAAU,uBAAsBC,SAAA,CAAC,oBAElCF,EAAAA,EAAAA,KAACmC,EAAAA,GAAI,CAACC,GAAIV,EAAAA,EAAUY,eAAgBrC,UAAU,8CAA6CC,SAAC,oCAW9G,G,6ECrIe,SAAS4B,EAAeS,GAEnC,MAAM,QAAEP,EAAO,YAAEE,EAAW,MAAED,EAAK,KAAEF,EAAK,QAAWQ,GAC9CC,EAAcC,IAAmBC,EAAAA,EAAAA,WAAS,IAE3C,QAAEC,EAAO,UAAErD,IAAcsD,EAAAA,EAAAA,OACzB,OAAErD,GAAWD,EAEbuD,EAAqBA,KACvBJ,GAAiBD,EAAa,EAGpC,OACErC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,OAAMC,SAAA,EACnBF,EAAAA,EAAAA,KAAA,SAAOC,UAAU,aAAa6C,QAASd,EAAQ9B,SAAE+B,KACjDjC,EAAAA,EAAAA,KAAC+C,EAAAA,GAAU,CACTC,KAAMhB,EACNW,QAASA,EACTM,OAAQC,IAAA,IAAC,MAAEC,GAAOD,EAAA,MACL,SAATnB,GAAkB/B,EAAAA,EAAAA,KAAA,SAClBoD,GAAIpB,EACJD,KAAK,UACDoB,EACJlD,UAAS,gBAAAoD,OAAkB9D,EAAOyC,GAAW,aAAe,IAC5D,mBAAkBA,EAClBE,YAAaA,IACD,aAATH,GAAsB5B,EAAAA,EAAAA,MAAA,OAAKF,UAAU,cAAaC,SAAA,EACrDF,EAAAA,EAAAA,KAAA,SACEoD,GAAIpB,EACJD,KAAMS,EAAe,OAAS,cAC1BW,EACJlD,UAAS,gBAAAoD,OAAkB9D,EAAOyC,GAAW,aAAe,IAC5D,mBAAkBA,EAClBE,YAAaA,IACb,KAAClC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,qBAAoBC,UACtCF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,mBAAmBqD,QAAST,EAAmB3C,SAC5DsC,GAAexC,EAAAA,EAAAA,KAAA,KAAGC,UAAU,eAAkBD,EAAAA,EAAAA,KAAA,KAAGC,UAAU,yBAGhED,EAAAA,EAAAA,KAACuD,EAAAA,GAAY,CAACvB,QAASA,EAASzC,OAAQA,QAC/BS,EAAAA,EAAAA,KAAA,OAAKwD,MAAM,qBAAqBC,KAAK,QAAOvD,SAAC,yBAE5C,KAGdF,EAAAA,EAAAA,KAACuD,EAAAA,GAAY,CAACvB,QAASA,EAASzC,OAAQA,MAG9C,C,uGC7CA,MAAMmE,EAAgBC,EAAAA,EAAMC,OAAO,CACjCC,QAAS,sCACTC,QAAS,MAIEpE,EAASA,KACpB,MAAM,aAAEqE,EAAY,YAAEC,EAAW,YAAEC,EAAW,WAAEC,IAAeC,EAAAA,EAAAA,MACzD,UAAExE,IAAcC,EAAAA,EAAAA,KA4EtB,MAAO,CAAEwE,WA1EUlD,eAAOmD,GAAsB,IAAjBC,EAAMC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EACvCR,IACAG,IACA,IACE,MAAMQ,QAAiBhB,EAAciB,IAAIN,EAAK,CAAEC,WAChD,OAAuB,MAApBI,EAASE,QACH5E,EAAAA,EAAAA,KAAC6E,EAAAA,EAAa,CAACC,SAAUJ,EAASK,aAGpCL,EAAStD,IAClB,CAAE,MAAOQ,GASP,MARAjC,EAAU,CACR6B,KAAM,QACNH,MAAM,YAADgC,OAAczB,EAAM8C,SAASE,OAAM,KAAAvB,OAAIzB,EAAM8C,SAASK,YAC3DC,MAAM7E,EAAAA,EAAAA,MAAA,KAAAD,SAAA,CAAG,qBAAiBF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,YAAWC,SAAE0B,EAAMqD,QAAQC,iBACrEzD,kBAAmB,MAClB,KACD,2BACA,oBACIG,CACR,CAAC,QACCoC,GACF,CACF,EAmDqBvE,YAjDDyB,MAAOmD,EAAKjD,KAC9B2C,IACAG,IACA,IACE,MAAMQ,QAAiBhB,EAAcyB,KAAKd,EAAKjD,GAQ/C,OAPuB,MAApBsD,EAASE,QACVQ,IAAAA,MAAW,CACT/D,MAAO,QACPE,KAAMmD,EAASW,QACf7D,KAAM,UAGHkD,EAAStD,IAClB,CAAE,MAAOQ,GAEP,MADAqC,EAAYrC,EAAM8C,SAAW9C,EAAM8C,SAAStD,KAAO,iBAC7CQ,CACR,CAAC,QACCoC,GACF,GA+BgCsB,WA5BfpE,MAAOmD,EAAKjD,KAC7B2C,IACAG,IACA,IAEE,aADuBR,EAAc6B,IAAIlB,EAAKjD,IAC9BA,IAClB,CAAE,MAAOQ,GAEP,MADAqC,EAAYrC,EAAM8C,SAAW9C,EAAM8C,SAAStD,KAAO,iBAC7CQ,CACR,CAAC,QACCoC,GACF,GAiB4CwB,cAdxBtE,UACpB6C,IACAG,IACA,IAEE,aADuBR,EAAc+B,OAAOpB,IAC5BjD,IAClB,CAAE,MAAOQ,GAEP,MADAqC,EAAYrC,EAAM8C,SAAW9C,EAAM8C,SAAStD,KAAO,iBAC7CQ,CACR,CAAC,QACCoC,GACF,GAG2D,C,mECrFxD,MAAMpF,EAAYA,KAErB,MAAOJ,EAAGC,IAAQC,EAAAA,EAAAA,IAAe,QAsDjC,MAAO,CAAEgH,eAnDcC,EAAAA,KAAaC,MAAM,CACtC5G,MAAO2G,EAAAA,KAAaE,MAAM,wBAAwBC,SAAStH,EAAE,qBAC7DuH,SAAUJ,EAAAA,KAAaG,SAAStH,EAAE,qBAAqBwH,IAAI,EAAGxH,EAAE,uBAChEyH,YAAaN,EAAAA,KAAaG,SAAStH,EAAE,qBAAqB0H,QAAQC,EAAAA,GAAa3H,EAAE,yBACjF4H,kBAAmBT,EAAAA,KAAaG,SAAStH,EAAE,qBAC3C6H,kBAAmBV,EAAAA,KAAaG,SAAStH,EAAE,qBAC3C8H,YAAaX,EAAAA,KAAaG,SAAStH,EAAE,qBACrC+H,MAAOZ,EAAAA,KACPa,SAAUb,EAAAA,KAAaG,SAAStH,EAAE,qBAClCS,SAAU0G,EAAAA,KAAaG,SAAStH,EAAE,qBAAqB0H,QAAQO,EAAAA,GAAYjI,EAAE,uBAC7EkI,gBAAiBf,EAAAA,KAAaG,SAAStH,EAAE,qBAAqBmI,MAAM,CAAChB,EAAAA,GAAQ,YAAa,MAAOnH,EAAE,2BACpGsH,WAwCsBnH,YArCLgH,EAAAA,KAAaC,MAAM,CACnC5G,MAAO2G,EAAAA,KAAaE,MAAM,wBAAwBC,SAAStH,EAAE,qBAC7DS,SAAU0G,EAAAA,KAAaG,SAAStH,EAAE,uBACnCsH,WAkCmCc,UA/BpBjB,EAAAA,KAAaC,MAAM,CACjCiB,SAAUlB,EAAAA,KAAaG,SAAStH,EAAE,uBACnCsH,WA6B8CgB,UA1B/BnB,EAAAA,KAAaC,MAAM,CACjCiB,SAAUlB,EAAAA,KAAaG,SAAStH,EAAE,uBACnCsH,WAwByDiB,cArBtCpB,EAAAA,KAAaC,MAAM,CACrCoB,WAAYrB,EAAAA,KACZsB,SAAUtB,EAAAA,KACVuB,iBAAkBvB,EAAAA,OACnBG,WAiBwEqB,kBAdjDxB,EAAAA,GAAW,CAIjCyB,WAAYzB,EAAAA,KAAYG,SAAStH,EAAE,uBACpCsH,WAS2FuB,oBANlE1B,EAAAA,GAAW,CACnC2B,WAAY3B,EAAAA,KACZ4B,WAAY5B,EAAAA,KACZ6B,cAAe7B,EAAAA,OAChBG,WAEgH,C","sources":["app/home/home.jsx","components/template/form-input/InputTextField.jsx","hooks/useApi.jsx","hooks/useSchema.jsx"],"sourcesContent":["import React, { memo } from \"react\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport { Swiper, SwiperSlide } from \"swiper/react\";\r\nimport { Autoplay } from \"swiper/modules\";\r\nimport { appRoutes } from \"../App\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { FormProvider, useForm } from \"react-hook-form\";\r\nimport { useApi } from \"../../hooks/useApi\";\r\nimport TypeIt from \"typeit-react\";\r\nimport { useSweetAlert } from \"../../hooks/useSweetAlert\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport { useSchema } from \"../../hooks/useSchema\";\r\nimport InputTextField from \"../../components/template/form-input/InputTextField\";\r\n\r\nconst Home = memo(function Home() {\r\n\r\n  const navigate = useNavigate()\r\n  const [t, i18n] = useTranslation('lang');\r\n  const { loginSchema } = useSchema();\r\n\r\n  const loginForm = useForm({\r\n    defaultValues: {\r\n      Email: \"\",\r\n      Password: \"\",\r\n    },\r\n    resolver: yupResolver(loginSchema),\r\n    mode: \"all\", // this is mode form validation || \"onSubmit\" || \"onChange\" || \"all\"\r\n  });\r\n\r\n  const { handleSubmit, formState } = loginForm;\r\n  const { errors, isValid } = formState;\r\n  const { postRequest } = useApi()\r\n  const { showAlert } = useSweetAlert()\r\n\r\n  const login = async (data) => {\r\n    try {\r\n      const result = await postRequest(`cif/login`, data);\r\n      if(!result.result) {\r\n        showAlert({\r\n          title: result.response_message,\r\n          text: `Please check your email and password!`,\r\n          icon: 'warning',\r\n          confirmButtonText: 'Ok'\r\n        }, 'xs');\r\n      } else {\r\n        showAlert({\r\n          title: result.response_message,\r\n          text: `Please check your email and password!`,\r\n          icon: 'success',\r\n          confirmButtonText: 'Ok'\r\n        }, 'xs');\r\n          navigate(appRoutes.HOME)\r\n      }\r\n    } catch (error) {\r\n      showAlert({\r\n        title: <h1>Input something</h1>,\r\n        text: `This is a custom SweetAlert2 alert using React Context!`,\r\n        icon: 'Error',\r\n        confirmButtonText: 'Ok'\r\n      }, 'xs');\r\n    }\r\n  }\r\n\r\n  const image = localStorage.getItem('camera');\r\n\r\n  return (\r\n    <section className=\"page-home\">\r\n      {/* Hero start */}\r\n      \r\n      <div className=\"container\">\r\n        <div className=\"row align-items-center\">\r\n          <div className=\"col-md-8 my-2\" data-aos=\"fade-right\">\r\n            <div className=\"content-swiper\">\r\n              <Swiper className=\"mySwiper card\" loop={true} autoplay={{\r\n                  delay: 7000,\r\n                  disableOnInteraction: false,\r\n                }} modules={[Autoplay]} >\r\n                <SwiperSlide className=\"d-flex align-items-center justify-content-center\">\r\n                  {/* <div className=\"col-12 ms-auto card card-background card-background-mask-info\">\r\n                  </div> */}\r\n                  <img src={image} style={{width: '100%'}} alt=\"\"/>\r\n                  {/* <p className=\"text-swiper\"><TypeIt>{t('REGIS.slider1')}</TypeIt></p> */}\r\n                </SwiperSlide>\r\n                {/* <SwiperSlide className=\"d-flex align-items-center justify-content-center\">\r\n                  <div className=\"col-12 ms-auto card card-background card-background-mask-info\">\r\n                    <img src=\"/img/closeup-economist-using.jpg\" style={{width: '100%'}} alt=\"\"/>\r\n                  </div>\r\n                  <p className=\"text-swiper\"><TypeIt>{t('REGIS.slider2')}</TypeIt></p>\r\n                </SwiperSlide>\r\n                <SwiperSlide className=\"d-flex align-items-center justify-content-center\">\r\n                  <div className=\"col-12 ms-auto card card-background card-background-mask-info\">\r\n                    <img src=\"/img/glass-jar-full-money.jpg\" style={{width: '100%'}} alt=\"\"/>\r\n                  </div>\r\n                  <p className=\"text-swiper\"><TypeIt>{t('REGIS.slider3')}</TypeIt></p>\r\n                </SwiperSlide>\r\n                <SwiperSlide className=\"d-flex align-items-center justify-content-center\">\r\n                  <div className=\"col-12 ms-auto card card-background card-background-mask-info\">\r\n                    <img src=\"/img/close-up-education.jpg\" style={{width: '100%'}} alt=\"\"/>\r\n                  </div>\r\n                  <p className=\"text-swiper\"><TypeIt>{t('REGIS.slider4')}</TypeIt></p>\r\n                </SwiperSlide> */}\r\n              </Swiper>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-md-4 shadow rounded\" data-aos=\"flip-right\">\r\n            <div className=\"card card-plain py-3 my-3 form-login\">\r\n              <div className=\"card-header pb-0 text-left rounded\">\r\n                <h4 className=\"font-weight-bolder\">Sign In</h4>\r\n                <p className=\"mb-0\">Enter your email and password to sign in</p>\r\n              </div>\r\n              <div className=\"card-body\">\r\n                <form noValidate onSubmit={handleSubmit(login)}>\r\n                  <FormProvider {...loginForm}>\r\n\r\n                    <InputTextField type=\"text\" ngModel=\"Email\" label={t(\"CIF.email\")} placeholder=\"Please enter your email\" />\r\n                    <InputTextField type=\"password\" ngModel=\"Password\" label={t(\"CIF.password\")} placeholder=\"\" />\r\n                    \r\n                    <div className=\"text-center\">\r\n                      <button type=\"submit\" className=\"btn btn-lg bg-gradient-info btn-lg w-100 mt-4 mb-0\" > Sign in </button>\r\n                      <Link to={appRoutes.REGISTER} type=\"button\" className=\"btn btn-lg bg-gradient-primary btn-lg w-100 mt-4 mb-0\" > Sign Up </Link>\r\n                    </div>\r\n                  </FormProvider>\r\n                </form>\r\n              </div>\r\n              <div className=\"card-footer text-center pt-0 px-lg-2 px-1\">\r\n                <p className=\"mb-4 text-sm mx-auto\">\r\n                  Forgot Password?\r\n                  <Link to={appRoutes.FORGOTPASSWORD} className=\"text-primary text-gradient font-weight-bold\">Change Password</Link>\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {/* Hero end */}\r\n\r\n    </section>\r\n  );\r\n})\r\n\r\nexport default Home\r\n","import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport { Controller, useFormContext } from 'react-hook-form';\r\nimport { ErrorMessage } from '../../../utils/utility';\r\n\r\nexport default function InputTextField(props) {\r\n\r\n    const { ngModel, placeholder, label, type=\"text\" } = props;\r\n    const [showPassword, setShowPassword] = useState(false);\r\n\r\n    const { control, formState } = useFormContext();\r\n    const { errors } = formState;\r\n\r\n    const handleShowPassword = () => {\r\n        setShowPassword(!showPassword);\r\n    }\r\n\r\n  return (\r\n    <div className=\"mb-3\">\r\n      <label className=\"form-label\" htmlFor={ngModel}>{label}</label>\r\n      <Controller\r\n        name={ngModel}\r\n        control={control}\r\n        render={({ field }) => (\r\n            type === \"text\" ? <input\r\n            id={ngModel} \r\n            type=\"text\"     \r\n            {...field}\r\n            className={`form-control ${errors[ngModel] ? 'is-invalid' : ''}`}\r\n            aria-describedby={ngModel}\r\n            placeholder={placeholder}\r\n          /> : type === \"password\" ? <div className=\"input-group\">\r\n            <input\r\n              id={ngModel} \r\n              type={showPassword ? \"text\" : \"password\"}     \r\n              {...field}\r\n              className={`form-control ${errors[ngModel] ? 'is-invalid' : ''}`}\r\n              aria-describedby={ngModel}\r\n              placeholder={placeholder}\r\n            /> <div className=\"input-group-append\">\r\n            <span className=\"input-group-text\" onClick={handleShowPassword}> \r\n              {showPassword ? <i className=\"bi bi-eye\"></i>: <i className=\"bi bi-eye-slash\"></i>}\r\n            </span>\r\n          </div>\r\n          <ErrorMessage ngModel={ngModel} errors={errors} />\r\n          </div> : <div class=\"alert alert-danger\" role=\"alert\">\r\n                Input type not found!\r\n              </div>\r\n        )}\r\n      />\r\n      <ErrorMessage ngModel={ngModel} errors={errors} />\r\n    </div>\r\n  )\r\n}\r\n\r\nInputTextField.propTypes = {\r\n  ngModel: PropTypes.string.isRequired,\r\n  placeholder: PropTypes.string,\r\n  label: PropTypes.string.isRequired,\r\n  type: PropTypes.string\r\n};","// src/api.js\r\n\r\nimport axios from 'axios';\r\nimport ErrorBoundary from '../components/template/slice/ErrorBoundary';\r\nimport Swal from 'sweetalert2';\r\nimport { useLoadingApi } from './useLoadingApi';\r\nimport { useSweetAlert } from './useSweetAlert';\r\n\r\nconst axiosInstance = axios.create({\r\n  baseURL: 'http://opening.micropiranti.id/api/', // untuk Ganti dengan URL dasar API\r\n  timeout: 10000, // Waktu timeout request\r\n  \r\n});\r\n\r\nexport const useApi = () => {\r\n  const { startLoading, stopLoading, setErrorMsg, clearError } = useLoadingApi();\r\n  const { showAlert } = useSweetAlert();\r\n\r\n  const getRequest = async (url, params = {}) => {\r\n    startLoading();\r\n    clearError();\r\n    try {\r\n      const response = await axiosInstance.get(url, { params });\r\n      if(response.status !== 200) {\r\n        return <ErrorBoundary fallback={response.statusText}/>\r\n      } \r\n\r\n      return response.data;\r\n    } catch (error) {\r\n      showAlert({\r\n        icon: 'error',\r\n        title: `Oops..., ${error.response.status} ${error.response.statusText}`,\r\n        html: <p>Please check url <span className=\"text-info\">{error.request.responseURL}</span></p>,\r\n        confirmButtonText: 'Ok',\r\n      }, 'sm',\r\n        'default-popup-background',\r\n        'default-backdrop')\r\n      throw error;\r\n    } finally {\r\n      stopLoading();\r\n    }\r\n  };\r\n\r\n  const postRequest = async (url, data) => {\r\n    startLoading();\r\n    clearError();\r\n    try {\r\n      const response = await axiosInstance.post(url, data);\r\n      if(response.status !== 200) {\r\n        Swal.error({\r\n          title: \"Error\",\r\n          text: response.message,\r\n          icon: \"error\"\r\n        })\r\n      }\r\n      return response.data;\r\n    } catch (error) {\r\n      setErrorMsg(error.response ? error.response.data : 'Network Error');\r\n      throw error;\r\n    } finally {\r\n      stopLoading();\r\n    }\r\n  };\r\n\r\n  const putRequest = async (url, data) => {\r\n    startLoading();\r\n    clearError();\r\n    try {\r\n      const response = await axiosInstance.put(url, data);\r\n      return response.data;\r\n    } catch (error) {\r\n      setErrorMsg(error.response ? error.response.data : 'Network Error');\r\n      throw error;\r\n    } finally {\r\n      stopLoading();\r\n    }\r\n  };\r\n\r\n  const deleteRequest = async (url) => {\r\n    startLoading();\r\n    clearError();\r\n    try {\r\n      const response = await axiosInstance.delete(url);\r\n      return response.data;\r\n    } catch (error) {\r\n      setErrorMsg(error.response ? error.response.data : 'Network Error');\r\n      throw error;\r\n    } finally {\r\n      stopLoading();\r\n    }\r\n  };\r\n\r\n  return { getRequest, postRequest, putRequest, deleteRequest };\r\n};\r\n","/* eslint-disable no-unused-vars */\r\n\r\nimport * as yup from \"yup\";\r\nimport { useTranslation } from 'react-i18next';\r\nimport { pawdRegExp, phoneRegExp } from \"../utils/utility\";\r\n\r\n// SCHEMA FORM VALIDATION\r\nexport const useSchema = () => {\r\n\r\n    const [t, i18n] = useTranslation('lang');\r\n\r\n    // SCHEMA VALIDATION FOR REGISTER\r\n    const registerSchema = yup.object().shape({ \r\n        Email: yup.string().email(\"This must be a email\").required(t(\"GLOBAL.mandatory\")),\r\n        Fullname: yup.string().required(t(\"GLOBAL.mandatory\")).min(3, t(\"VALIDATE.minlength\")),\r\n        MobilePhone: yup.string().required(t(\"GLOBAL.mandatory\")).matches(phoneRegExp, t(\"VALIDATE.mobilephone\")),\r\n        BankAccountNumber: yup.string().required(t(\"GLOBAL.mandatory\")),\r\n        BankAccountHolder: yup.string().required(t(\"GLOBAL.mandatory\")),\r\n        QuestionRDN: yup.number().required(t(\"GLOBAL.mandatory\")),\r\n        Sales: yup.number(),\r\n        BankName: yup.string().required(t(\"GLOBAL.mandatory\")),\r\n        Password: yup.string().required(t(\"GLOBAL.mandatory\")).matches(pawdRegExp, t(\"REGIS.strengthpass\")),\r\n        ConfirmPassword: yup.string().required(t(\"GLOBAL.mandatory\")).oneOf([yup.ref(\"Password\"), null], t(\"VALIDATE.ConfPassErr\")),\r\n    }).required();\r\n\r\n    // SCHEMA VALIDATION FOR LOGIN\r\n    const loginSchema = yup.object().shape({ \r\n        Email: yup.string().email(\"This must be a email\").required(t(\"GLOBAL.mandatory\")),\r\n        Password: yup.string().required(t(\"GLOBAL.mandatory\")),\r\n    }).required();\r\n\r\n    // SCHEMA VALIDATION FOR BANK BCA\r\n    const bcaSchema = yup.object().shape({ \r\n        District: yup.number().required(t(\"GLOBAL.mandatory\")),\r\n    }).required();\r\n\r\n    // SCHEMA VALIDATION FOR BANK BCA\r\n    const briSchema = yup.object().shape({ \r\n        District: yup.number().required(t(\"GLOBAL.mandatory\")),\r\n    }).required();\r\n\r\n    // SCHEMA VALIDATION FOR BANK BCA\r\n    const permataSchema = yup.object().shape({ \r\n        Occupation: yup.string(),\r\n        Position: yup.string(),\r\n        NatureOfBusiness: yup.string(),\r\n    }).required();\r\n\r\n    // SCHEMA VALIDATION FOR DATA PRIBADI\r\n    const dataPribadiSchema = yup.object({ \r\n        // Email: yup.string().email(\"This must be a email\").required(t(\"GLOBAL.mandatory\")),\r\n        // Fullname: yup.string().required(t(\"GLOBAL.mandatory\")),\r\n        // Agree: yup.boolean().required(t(\"GLOBAL.mandatory\")),\r\n        fundsource: yup.array().required(t(\"GLOBAL.mandatory\")),\r\n    }).required();\r\n\r\n    // SCHEMA VALIDATION FOR DATA PENDUKUNG\r\n    const dataPendukungSchema = yup.object({ \r\n        IDCardFile: yup.string(),\r\n        SelfieFile: yup.string(),\r\n        SignatureFile: yup.string(),\r\n    }).required();\r\n\r\n    return { registerSchema, loginSchema, bcaSchema, briSchema, permataSchema, dataPribadiSchema, dataPendukungSchema };\r\n}"],"names":["memo","navigate","useNavigate","t","i18n","useTranslation","loginSchema","useSchema","loginForm","useForm","defaultValues","Email","Password","resolver","yupResolver","mode","handleSubmit","formState","errors","isValid","postRequest","useApi","showAlert","useSweetAlert","image","localStorage","getItem","_jsx","className","children","_jsxs","Swiper","loop","autoplay","delay","disableOnInteraction","modules","Autoplay","SwiperSlide","src","style","width","alt","noValidate","onSubmit","async","result","data","title","response_message","text","icon","confirmButtonText","appRoutes","HOME","error","FormProvider","InputTextField","type","ngModel","label","placeholder","Link","to","REGISTER","FORGOTPASSWORD","props","showPassword","setShowPassword","useState","control","useFormContext","handleShowPassword","htmlFor","Controller","name","render","_ref","field","id","concat","onClick","ErrorMessage","class","role","axiosInstance","axios","create","baseURL","timeout","startLoading","stopLoading","setErrorMsg","clearError","useLoadingApi","getRequest","url","params","arguments","length","undefined","response","get","status","ErrorBoundary","fallback","statusText","html","request","responseURL","post","Swal","message","putRequest","put","deleteRequest","delete","registerSchema","yup","shape","email","required","Fullname","min","MobilePhone","matches","phoneRegExp","BankAccountNumber","BankAccountHolder","QuestionRDN","Sales","BankName","pawdRegExp","ConfirmPassword","oneOf","bcaSchema","District","briSchema","permataSchema","Occupation","Position","NatureOfBusiness","dataPribadiSchema","fundsource","dataPendukungSchema","IDCardFile","SelfieFile","SignatureFile"],"sourceRoot":""}