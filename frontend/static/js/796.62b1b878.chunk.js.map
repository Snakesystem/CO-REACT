{"version":3,"file":"static/js/796.62b1b878.chunk.js","mappings":"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","sources":["app/client/dashboard.jsx","components/template/docs/InputFileUpload.jsx","hooks/useApi.jsx"],"sourcesContent":["import React from 'react'\r\nimport DataGridTable from '../../components/template/slice/DataGridTable'\r\nimport PhoneNumberForm from '../../components/template/docs/InputFileUpload'\r\n\r\nexport default function Dashboard() {\r\n  return (\r\n    <div>\r\n      {/* <DataGridTable/> */}\r\n      <PhoneNumberForm/>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\n\r\nconst CameraApp = () => {\r\n  const videoRef = useRef(null);\r\n  const canvasRef = useRef(null);\r\n  const screenshotsContainerRef = useRef(null);\r\n  const [videoStream, setVideoStream] = useState(null);\r\n  const [useFrontCamera, setUseFrontCamera] = useState(true);\r\n  const [savedScreenshots, setSavedScreenshots] = useState([]);\r\n\r\n  useEffect(() => {\r\n    initializeCamera();\r\n\r\n    return () => {\r\n      stopVideoStream();\r\n    };\r\n  }, [useFrontCamera]);\r\n\r\n  const stopVideoStream = () => {\r\n    if (videoStream) {\r\n      videoStream.getTracks().forEach((track) => {\r\n        track.stop();\r\n      });\r\n    }\r\n  };\r\n\r\n  const initializeCamera = async () => {\r\n    stopVideoStream();\r\n\r\n    const constraints = {\r\n      video: {\r\n        facingMode: useFrontCamera ? \"user\" : \"environment\",\r\n      },\r\n    };\r\n\r\n    try {\r\n      const stream = await navigator.mediaDevices.getUserMedia(constraints);\r\n      setVideoStream(stream);\r\n      videoRef.current.srcObject = stream;\r\n    } catch (err) {\r\n      alert(\"Could not access the camera\");\r\n    }\r\n  };\r\n\r\n  const handleScreenshot = () => {\r\n    const canvas = canvasRef.current;\r\n    const video = videoRef.current;\r\n\r\n    canvas.width = video.videoWidth;\r\n    canvas.height = video.videoHeight;\r\n    canvas.getContext(\"2d\").drawImage(video, 0, 0);\r\n\r\n    // Resize the image to desired dimensions\r\n    const resizedCanvas = resizeImage(canvas, 640, 480); // Example: Resize to 640x480\r\n    const dataUrl = resizedCanvas.toDataURL(\"image/png\");\r\n\r\n    // Generate random file name\r\n    const fileName = generateRandomFileName();\r\n\r\n    // Save screenshot to localStorage\r\n    localStorage.setItem(fileName, dataUrl);\r\n\r\n    // Update savedScreenshots state with new screenshot\r\n    setSavedScreenshots([...savedScreenshots, fileName]);\r\n  };\r\n\r\n  const generateRandomFileName = () => {\r\n    return `screenshot_${Math.random().toString(36).substr(2, 9)}.png`;\r\n  };\r\n\r\n  const resizeImage = (canvas, targetWidth, targetHeight) => {\r\n    const { width, height } = canvas;\r\n\r\n    // Hitung skala untuk menentukan bagian mana yang akan dipangkas\r\n    const scale = Math.min(targetWidth / width, targetHeight / height);\r\n\r\n    // Hitung ukuran baru setelah scaling\r\n    const scaledWidth = width * scale;\r\n    const scaledHeight = height * scale;\r\n\r\n    // Buat canvas baru untuk hasil resize dengan ukuran target\r\n    const resizedCanvas = document.createElement(\"canvas\");\r\n    resizedCanvas.width = targetWidth;\r\n    resizedCanvas.height = targetHeight;\r\n\r\n    // Lakukan resize ke canvas baru\r\n    resizedCanvas.getContext(\"2d\").drawImage(\r\n      canvas,\r\n      0, 0, width, height, // Bagian yang akan digambar dari gambar asli\r\n      0, 0, targetWidth, targetHeight // Bagian yang akan digambar ulang di canvas baru\r\n    );\r\n\r\n    return resizedCanvas;\r\n  };\r\n\r\n  const handleLoadScreenshot = (fileName) => {\r\n    const dataUrl = localStorage.getItem(fileName);\r\n    const img = document.createElement(\"img\");\r\n    img.src = dataUrl;\r\n    screenshotsContainerRef.current.innerHTML = \"\";\r\n    screenshotsContainerRef.current.appendChild(img);\r\n  };\r\n\r\n  const handleChangeCamera = () => {\r\n    setUseFrontCamera((prev) => !prev);\r\n    initializeCamera();\r\n  };\r\n\r\n  return (\r\n    <div style={{ position: \"relative\", width: \"100%\", height: \"100%\" }}>\r\n      <video\r\n        ref={videoRef}\r\n        style={{ width: \"100%\", height: \"100%\", objectFit: \"cover\" }}\r\n        autoPlay\r\n        muted\r\n      ></video>\r\n      <div style={{ position: \"absolute\", bottom: \"10px\", left: \"50%\", transform: \"translateX(-50%)\", zIndex: 1 }}>\r\n        <button onClick={handleScreenshot} className=\"btn btn-light\">\r\n          <i className=\"bi bi-camera-fill\"></i>\r\n        </button>\r\n        {savedScreenshots.length > 0 && (\r\n          <button onClick={() => handleLoadScreenshot(savedScreenshots[savedScreenshots.length - 1])} className=\"btn btn-light\">\r\n            <i className=\"bi bi-cloud-arrow-down-fill\"></i>\r\n          </button>\r\n        )}\r\n        <button onClick={handleChangeCamera} className=\"btn btn-light\">\r\n          <i className=\"bi bi-arrow-repeat\"></i>\r\n        </button>\r\n      </div>\r\n      <canvas ref={canvasRef} style={{ display: \"none\" }}></canvas>\r\n      <div ref={screenshotsContainerRef}></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CameraApp;\r\n","// src/api.js\r\n\r\nimport axios from 'axios';\r\nimport ErrorBoundary from '../components/template/slice/ErrorBoundary';\r\nimport Swal from 'sweetalert2';\r\nimport { useLoadingApi } from './useLoadingApi';\r\nimport { useSweetAlert } from './useSweetAlert';\r\n\r\nconst axiosInstance = axios.create({\r\n  baseURL: 'http://opening.micropiranti.id/api/', // untuk Ganti dengan URL dasar API\r\n  timeout: 10000, // Waktu timeout request\r\n  \r\n});\r\n\r\nexport const useApi = () => {\r\n  const { startLoading, stopLoading, setErrorMsg, clearError } = useLoadingApi();\r\n  const { showAlert } = useSweetAlert();\r\n\r\n  const getRequest = async (url, params = {}) => {\r\n    startLoading();\r\n    clearError();\r\n    try {\r\n      const response = await axiosInstance.get(url, { params });\r\n      if(response.status !== 200) {\r\n        return <ErrorBoundary fallback={response.statusText}/>\r\n      } \r\n\r\n      return response.data;\r\n    } catch (error) {\r\n      showAlert({\r\n        icon: 'error',\r\n        title: `Oops..., ${error.response.status} ${error.response.statusText}`,\r\n        html: <p>Please check url <span className=\"text-info\">{error.request.responseURL}</span></p>,\r\n        confirmButtonText: 'Ok',\r\n      }, 'sm',\r\n        'default-popup-background',\r\n        'default-backdrop')\r\n      throw error;\r\n    } finally {\r\n      stopLoading();\r\n    }\r\n  };\r\n\r\n  const postRequest = async (url, data) => {\r\n    startLoading();\r\n    clearError();\r\n    try {\r\n      const response = await axiosInstance.post(url, data);\r\n      if(response.status !== 200) {\r\n        Swal.error({\r\n          title: \"Error\",\r\n          text: response.message,\r\n          icon: \"error\"\r\n        })\r\n      }\r\n      return response.data;\r\n    } catch (error) {\r\n      setErrorMsg(error.response ? error.response.data : 'Network Error');\r\n      throw error;\r\n    } finally {\r\n      stopLoading();\r\n    }\r\n  };\r\n\r\n  const putRequest = async (url, data) => {\r\n    startLoading();\r\n    clearError();\r\n    try {\r\n      const response = await axiosInstance.put(url, data);\r\n      return response.data;\r\n    } catch (error) {\r\n      setErrorMsg(error.response ? error.response.data : 'Network Error');\r\n      throw error;\r\n    } finally {\r\n      stopLoading();\r\n    }\r\n  };\r\n\r\n  const deleteRequest = async (url) => {\r\n    startLoading();\r\n    clearError();\r\n    try {\r\n      const response = await axiosInstance.delete(url);\r\n      return response.data;\r\n    } catch (error) {\r\n      setErrorMsg(error.response ? error.response.data : 'Network Error');\r\n      throw error;\r\n    } finally {\r\n      stopLoading();\r\n    }\r\n  };\r\n\r\n  return { getRequest, postRequest, putRequest, deleteRequest };\r\n};\r\n"],"names":["Dashboard","_jsx","children","PhoneNumberForm","CameraApp","videoRef","useRef","canvasRef","screenshotsContainerRef","videoStream","setVideoStream","useState","useFrontCamera","setUseFrontCamera","savedScreenshots","setSavedScreenshots","useEffect","initializeCamera","stopVideoStream","getTracks","forEach","track","stop","async","constraints","video","facingMode","stream","navigator","mediaDevices","getUserMedia","current","srcObject","err","alert","generateRandomFileName","concat","Math","random","toString","substr","resizeImage","canvas","targetWidth","targetHeight","width","height","resizedCanvas","min","document","createElement","getContext","drawImage","_jsxs","style","position","ref","objectFit","autoPlay","muted","bottom","left","transform","zIndex","onClick","handleScreenshot","videoWidth","videoHeight","dataUrl","toDataURL","fileName","localStorage","setItem","className","length","getItem","img","src","innerHTML","appendChild","handleLoadScreenshot","handleChangeCamera","prev","display","axiosInstance","axios","create","baseURL","timeout","useApi","startLoading","stopLoading","setErrorMsg","clearError","useLoadingApi","showAlert","useSweetAlert","getRequest","url","params","arguments","undefined","response","get","status","ErrorBoundary","fallback","statusText","data","error","icon","title","html","request","responseURL","confirmButtonText","postRequest","post","Swal","text","message","putRequest","put","deleteRequest","delete"],"sourceRoot":""}