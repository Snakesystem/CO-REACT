{"version":3,"file":"static/js/355.98184dc2.chunk.js","mappings":"oKAGe,SAASA,EAAcC,GAEpC,MAAM,OAAEC,EAAM,IAAEC,EAAG,OAAEC,GAAWH,EAkC1BI,EAAaC,IAAsB,IAArB,KAAEC,EAAI,MAAEC,GAAOF,EACjC,OAA+B,MAA5BC,EAAKE,oBACCC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,eAAcC,SAAEJ,IAE/BA,CACT,EAGIK,EAAsBC,IAAgB,IAAf,MAAEN,GAAOM,EACpC,MAAc,YAAVN,GACOE,EAAAA,EAAAA,KAAA,OAAKC,UAAU,iDAAgDC,SAAEJ,IACvD,aAAVA,GACAE,EAAAA,EAAAA,KAAA,OAAKC,UAAU,gDAA+CC,SAAEJ,KAEhEE,EAAAA,EAAAA,KAAA,OAAAE,SAAMJ,GACjB,EAGIO,EAAmBC,IAAgB,IAAf,MAAER,GAAOQ,EACjC,OAAIR,GACOE,EAAAA,EAAAA,KAAA,OAAAE,SAAMJ,IAGV,GAAG,EAGZ,OACEE,EAAAA,EAAAA,KAAA,WAAAE,UACEF,EAAAA,EAAAA,KAACO,EAAAA,GAAa,CACZC,WAAU,GAAAC,OAAKf,GACfgB,SA5CkBA,EA4CMlB,EA3CrBkB,EAAQC,KAAKC,IAEhB,OADgBA,EAAOC,KAAKC,eAE1B,IAAK,UACH,MAAO,IAAKF,EAAQG,OAAQpB,GAC9B,IAAK,WACH,MAAO,IAAKiB,EAAQG,OAAQZ,GAC9B,QACE,MAAO,IAAKS,EAAQG,OAAQV,GAChC,KAmCAW,YAAU,EACVC,aAAc,GACdC,WAjEWC,UAA4B,IAArB,KAAEC,EAAI,MAAEC,GAAOC,EAErC,MAAMC,QAAkBC,MAAM,GAADf,OAAIhB,EAAG,iCAAAgB,OAAgCW,EAAI,WAAAX,OAAUY,EAAK,oDACjFI,QAAeF,EAASG,OAY9B,MAAO,CAAE7B,KAAM4B,EAAOE,KAAMC,MAAOH,EAAOI,MAAO,MAG3BnB,KAmD1B,C","sources":["components/template/slice/TableData.jsx"],"sourcesContent":["import React from 'react'\r\nimport ReactDataGrid from '@inovua/reactdatagrid-community'\r\n\r\nexport default function DataGridTable(props) {\r\n\r\n  const { header, url, nidkey } = props;\r\n  \r\n  const loadData = async ({ skip, limit }) => {\r\n\r\n    const response =  await fetch(`${url}?tablename=instruksibca&skip=${skip}&limit=${limit}&search=&sort=&order=&filter=&nidkey=&nidvalue=`)\r\n    const result = await response.json()\r\n    \r\n    // const uniqueNIDs = new Set();\r\n    // const uniqueRows = [];\r\n    \r\n    // result.rows.forEach(row => {\r\n    //   if (!uniqueNIDs.has(row.BankInstructionNID)) {\r\n    //     uniqueNIDs.add(row.BankInstructionNID);\r\n    //     uniqueRows.push(row);\r\n    //   }\r\n    // });\r\n\r\n    return { data: result.rows, count: result.total };\r\n  }\r\n\r\n  const tableFormatter = (columns) => {\r\n    return columns.map((column) => {\r\n        const colName = column.name.toLowerCase();\r\n        switch (colName) {\r\n          case 'autonid':\r\n            return { ...column, render: lockInject }\r\n          case 'httpcode':\r\n            return { ...column, render: StatusCodeFormatter }\r\n          default:\r\n            return { ...column, render: defaultFormatter };\r\n        }\r\n    })\r\n  }\r\n\r\n  const lockInject = ({ data, value }) => {\r\n    if(data.BankInstructionNID === 675) {\r\n      return <div className=\"text-primary\">{value}</div>\r\n    } else {\r\n      return value\r\n    }\r\n  }\r\n\r\n  const StatusCodeFormatter = ({ value }) => {\r\n    if (value === 'SUCCESS') {\r\n        return <div className=\"bg-success rounded text-center text-white mx-4\">{value}</div>\r\n    } else if (value === 'REJECTED') {\r\n        return <div className=\"bg-danger rounded text-center text-white mx-4\">{value}</div>\r\n    } else {\r\n        return <div>{value}</div>\r\n    }\r\n  }\r\n\r\n  const defaultFormatter = ({ value }) => { \r\n    if (value) {\r\n        return <div>{value}</div>\r\n    }\r\n\r\n    return \"-\"\r\n  }\r\n\r\n  return (\r\n    <section> \r\n      <ReactDataGrid\r\n        idProperty={`${nidkey}`}\r\n        columns={tableFormatter(header)}\r\n        pagination\r\n        defaultLimit={50}\r\n        dataSource={loadData}\r\n      /> \r\n    </section>\r\n  )\r\n}\r\n"],"names":["DataGridTable","props","header","url","nidkey","lockInject","_ref2","data","value","BankInstructionNID","_jsx","className","children","StatusCodeFormatter","_ref3","defaultFormatter","_ref4","ReactDataGrid","idProperty","concat","columns","map","column","name","toLowerCase","render","pagination","defaultLimit","dataSource","async","skip","limit","_ref","response","fetch","result","json","rows","count","total"],"sourceRoot":""}